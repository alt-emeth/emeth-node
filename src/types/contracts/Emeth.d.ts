/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EmethInterface extends ethers.utils.Interface {
  functions: {
    "cancel(bytes16)": FunctionFragment;
    "decline(bytes16)": FunctionFragment;
    "process(bytes16)": FunctionFragment;
    "rejectResult(bytes16)": FunctionFragment;
    "request(bytes16,uint256,string,string,uint256,uint256)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "submit(bytes16,string)": FunctionFragment;
    "timeout(bytes16)": FunctionFragment;
    "verify(bytes16,uint256)": FunctionFragment;
    "withdrawSlotReward(uint256)": FunctionFragment;
    "currentSlot()": FunctionFragment;
    "currentSlotReward()": FunctionFragment;
    "DECLINE_PENALTY_RATE()": FunctionFragment;
    "DEPOSIT_RATE()": FunctionFragment;
    "emtToken()": FunctionFragment;
    "FAILED_PENALTY_RATE()": FunctionFragment;
    "getEstimatedGas(uint256,uint256)": FunctionFragment;
    "isVerifier(address)": FunctionFragment;
    "jobAssignedCount(address)": FunctionFragment;
    "jobAssignedHistory(address,uint256)": FunctionFragment;
    "jobAssigns(bytes16)": FunctionFragment;
    "jobDetails(bytes16)": FunctionFragment;
    "jobIndexes(uint256)": FunctionFragment;
    "jobs(bytes16)": FunctionFragment;
    "MAX_SLOT_GAS_PER_NODE()": FunctionFragment;
    "nodeSlotCount(address)": FunctionFragment;
    "nodeSlots(address,uint256)": FunctionFragment;
    "nodeSlotUnique(address,uint256)": FunctionFragment;
    "slotBalances(uint256,address)": FunctionFragment;
    "slotGas(uint256,address)": FunctionFragment;
    "slots(uint256)": FunctionFragment;
    "startSlot()": FunctionFragment;
    "TIMEOUT_PENALTY_RATE()": FunctionFragment;
    "verifier()": FunctionFragment;
    "VERIFIER_FEE()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "decline", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "process", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "rejectResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "setVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "timeout", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSlotReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSlotReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECLINE_PENALTY_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "emtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FAILED_PENALTY_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEstimatedGas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "jobAssignedCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jobAssignedHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobAssigns",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jobDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jobIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "MAX_SLOT_GAS_PER_NODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodeSlotCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeSlots",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeSlotUnique",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotBalances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "slotGas",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "slots", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "startSlot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TIMEOUT_PENALTY_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_FEE",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSlotReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSlotReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECLINE_PENALTY_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FAILED_PENALTY_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEstimatedGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jobAssignedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobAssignedHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobAssigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobIndexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SLOT_GAS_PER_NODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeSlotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodeSlots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeSlotUnique",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slotBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slotGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startSlot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TIMEOUT_PENALTY_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_FEE",
    data: BytesLike
  ): Result;

  events: {
    "Cancel(bytes16)": EventFragment;
    "Penalty(address,uint256)": EventFragment;
    "Request(address,bytes16,uint256,uint256)": EventFragment;
    "Reward(address,uint256,uint256)": EventFragment;
    "Status(bytes16,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Penalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Request"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Status"): EventFragment;
}

export class Emeth extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EmethInterface;

  functions: {
    cancel(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancel(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decline(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decline(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    process(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "process(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectResult(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rejectResult(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    request(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "request(bytes16,uint256,string,string,uint256,uint256)"(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVerifier(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVerifier(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submit(
      _jobId: BytesLike,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submit(bytes16,string)"(
      _jobId: BytesLike,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeout(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "timeout(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "verify(bytes16,uint256)"(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSlotReward(
      _slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawSlotReward(uint256)"(
      _slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentSlot(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentSlot()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSlotReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentSlotReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECLINE_PENALTY_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DECLINE_PENALTY_RATE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPOSIT_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emtToken(overrides?: CallOverrides): Promise<[string]>;

    "emtToken()"(overrides?: CallOverrides): Promise<[string]>;

    FAILED_PENALTY_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FAILED_PENALTY_RATE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEstimatedGas(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEstimatedGas(uint256,uint256)"(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isVerifier(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isVerifier(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    jobAssignedCount(
      _node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "jobAssignedCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    jobAssignedHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "jobAssignedHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    jobAssigns(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        node: string;
        deposit: BigNumber;
        gas: BigNumber;
        startedAt: BigNumber;
        submittedAt: BigNumber;
        verifiedAt: BigNumber;
      }
    >;

    "jobAssigns(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        node: string;
        deposit: BigNumber;
        gas: BigNumber;
        startedAt: BigNumber;
        submittedAt: BigNumber;
        verifiedAt: BigNumber;
      }
    >;

    jobDetails(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        programId: BigNumber;
        param: string;
        dataset: string;
        result: string;
      }
    >;

    "jobDetails(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        programId: BigNumber;
        param: string;
        dataset: string;
        result: string;
      }
    >;

    jobIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "jobIndexes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    jobs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        jobId: string;
        owner: string;
        deadline: BigNumber;
        fee: BigNumber;
        status: BigNumber;
        requestedAt: BigNumber;
      }
    >;

    "jobs(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        jobId: string;
        owner: string;
        deadline: BigNumber;
        fee: BigNumber;
        status: BigNumber;
        requestedAt: BigNumber;
      }
    >;

    MAX_SLOT_GAS_PER_NODE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_SLOT_GAS_PER_NODE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nodeSlotCount(
      _node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nodeSlotCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nodeSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nodeSlots(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nodeSlotUnique(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "nodeSlotUnique(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    slotBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "slotBalances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    slotGas(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "slotGas(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    slots(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _totalGas: BigNumber; _totalReward: BigNumber }
    >;

    "slots(uint256)"(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _totalGas: BigNumber; _totalReward: BigNumber }
    >;

    startSlot(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startSlot()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIMEOUT_PENALTY_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TIMEOUT_PENALTY_RATE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    "verifier()"(overrides?: CallOverrides): Promise<[string]>;

    VERIFIER_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "VERIFIER_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancel(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancel(bytes16)"(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decline(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decline(bytes16)"(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  process(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "process(bytes16)"(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectResult(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rejectResult(bytes16)"(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  request(
    _jobId: BytesLike,
    _programId: BigNumberish,
    _dataset: string,
    _param: string,
    _fee: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "request(bytes16,uint256,string,string,uint256,uint256)"(
    _jobId: BytesLike,
    _programId: BigNumberish,
    _dataset: string,
    _param: string,
    _fee: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVerifier(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVerifier(address)"(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submit(
    _jobId: BytesLike,
    _result: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submit(bytes16,string)"(
    _jobId: BytesLike,
    _result: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeout(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "timeout(bytes16)"(
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    _jobId: BytesLike,
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "verify(bytes16,uint256)"(
    _jobId: BytesLike,
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSlotReward(
    _slot: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawSlotReward(uint256)"(
    _slot: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentSlot(overrides?: CallOverrides): Promise<BigNumber>;

  "currentSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentSlotReward(overrides?: CallOverrides): Promise<BigNumber>;

  "currentSlotReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  DECLINE_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "DECLINE_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  emtToken(overrides?: CallOverrides): Promise<string>;

  "emtToken()"(overrides?: CallOverrides): Promise<string>;

  FAILED_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "FAILED_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEstimatedGas(
    _datasetSizeMB: BigNumberish,
    _algoComplexity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEstimatedGas(uint256,uint256)"(
    _datasetSizeMB: BigNumberish,
    _algoComplexity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isVerifier(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isVerifier(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  jobAssignedCount(
    _node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "jobAssignedCount(address)"(
    _node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  jobAssignedHistory(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "jobAssignedHistory(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  jobAssigns(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      node: string;
      deposit: BigNumber;
      gas: BigNumber;
      startedAt: BigNumber;
      submittedAt: BigNumber;
      verifiedAt: BigNumber;
    }
  >;

  "jobAssigns(bytes16)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      node: string;
      deposit: BigNumber;
      gas: BigNumber;
      startedAt: BigNumber;
      submittedAt: BigNumber;
      verifiedAt: BigNumber;
    }
  >;

  jobDetails(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      programId: BigNumber;
      param: string;
      dataset: string;
      result: string;
    }
  >;

  "jobDetails(bytes16)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      programId: BigNumber;
      param: string;
      dataset: string;
      result: string;
    }
  >;

  jobIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "jobIndexes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  jobs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      exist: boolean;
      jobId: string;
      owner: string;
      deadline: BigNumber;
      fee: BigNumber;
      status: BigNumber;
      requestedAt: BigNumber;
    }
  >;

  "jobs(bytes16)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      exist: boolean;
      jobId: string;
      owner: string;
      deadline: BigNumber;
      fee: BigNumber;
      status: BigNumber;
      requestedAt: BigNumber;
    }
  >;

  MAX_SLOT_GAS_PER_NODE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_SLOT_GAS_PER_NODE()"(overrides?: CallOverrides): Promise<BigNumber>;

  nodeSlotCount(_node: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nodeSlotCount(address)"(
    _node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nodeSlots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nodeSlots(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nodeSlotUnique(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "nodeSlotUnique(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  slotBalances(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "slotBalances(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  slotGas(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "slotGas(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  slots(
    _slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _totalGas: BigNumber; _totalReward: BigNumber }
  >;

  "slots(uint256)"(
    _slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _totalGas: BigNumber; _totalReward: BigNumber }
  >;

  startSlot(overrides?: CallOverrides): Promise<BigNumber>;

  "startSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

  TIMEOUT_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "TIMEOUT_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  verifier(overrides?: CallOverrides): Promise<string>;

  "verifier()"(overrides?: CallOverrides): Promise<string>;

  VERIFIER_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "VERIFIER_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancel(_jobId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "cancel(bytes16)"(
      _jobId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decline(_jobId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "decline(bytes16)"(
      _jobId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    process(_jobId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "process(bytes16)"(
      _jobId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rejectResult(
      _jobId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rejectResult(bytes16)"(
      _jobId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    request(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "request(bytes16,uint256,string,string,uint256,uint256)"(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setVerifier(_addr: string, overrides?: CallOverrides): Promise<void>;

    "setVerifier(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submit(
      _jobId: BytesLike,
      _result: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "submit(bytes16,string)"(
      _jobId: BytesLike,
      _result: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timeout(_jobId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "timeout(bytes16)"(
      _jobId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verify(bytes16,uint256)"(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawSlotReward(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawSlotReward(uint256)"(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentSlot(overrides?: CallOverrides): Promise<BigNumber>;

    "currentSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentSlotReward(overrides?: CallOverrides): Promise<BigNumber>;

    "currentSlotReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    DECLINE_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DECLINE_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    emtToken(overrides?: CallOverrides): Promise<string>;

    "emtToken()"(overrides?: CallOverrides): Promise<string>;

    FAILED_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "FAILED_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEstimatedGas(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEstimatedGas(uint256,uint256)"(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVerifier(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isVerifier(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    jobAssignedCount(
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "jobAssignedCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobAssignedHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "jobAssignedHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    jobAssigns(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        node: string;
        deposit: BigNumber;
        gas: BigNumber;
        startedAt: BigNumber;
        submittedAt: BigNumber;
        verifiedAt: BigNumber;
      }
    >;

    "jobAssigns(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        node: string;
        deposit: BigNumber;
        gas: BigNumber;
        startedAt: BigNumber;
        submittedAt: BigNumber;
        verifiedAt: BigNumber;
      }
    >;

    jobDetails(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        programId: BigNumber;
        param: string;
        dataset: string;
        result: string;
      }
    >;

    "jobDetails(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        programId: BigNumber;
        param: string;
        dataset: string;
        result: string;
      }
    >;

    jobIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "jobIndexes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    jobs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        jobId: string;
        owner: string;
        deadline: BigNumber;
        fee: BigNumber;
        status: BigNumber;
        requestedAt: BigNumber;
      }
    >;

    "jobs(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        jobId: string;
        owner: string;
        deadline: BigNumber;
        fee: BigNumber;
        status: BigNumber;
        requestedAt: BigNumber;
      }
    >;

    MAX_SLOT_GAS_PER_NODE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_SLOT_GAS_PER_NODE()"(overrides?: CallOverrides): Promise<BigNumber>;

    nodeSlotCount(_node: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nodeSlotCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nodeSlots(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeSlotUnique(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "nodeSlotUnique(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    slotBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slotBalances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slotGas(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slotGas(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slots(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _totalGas: BigNumber; _totalReward: BigNumber }
    >;

    "slots(uint256)"(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _totalGas: BigNumber; _totalReward: BigNumber }
    >;

    startSlot(overrides?: CallOverrides): Promise<BigNumber>;

    "startSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEOUT_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "TIMEOUT_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<string>;

    "verifier()"(overrides?: CallOverrides): Promise<string>;

    VERIFIER_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "VERIFIER_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Cancel(
      jobId: BytesLike | null
    ): TypedEventFilter<[string], { jobId: string }>;

    Penalty(
      nodeAddress: string | null,
      slashed: null
    ): TypedEventFilter<
      [string, BigNumber],
      { nodeAddress: string; slashed: BigNumber }
    >;

    Request(
      owner: string | null,
      jobId: BytesLike | null,
      fee: null,
      deadline: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { owner: string; jobId: string; fee: BigNumber; deadline: BigNumber }
    >;

    Reward(
      nodeAddress: string | null,
      slot: null,
      gas: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { nodeAddress: string; slot: BigNumber; gas: BigNumber }
    >;

    Status(
      jobId: BytesLike | null,
      nodeAddress: null,
      status: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { jobId: string; nodeAddress: string; status: BigNumber }
    >;
  };

  estimateGas: {
    cancel(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancel(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decline(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decline(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    process(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "process(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectResult(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rejectResult(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    request(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "request(bytes16,uint256,string,string,uint256,uint256)"(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVerifier(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVerifier(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submit(
      _jobId: BytesLike,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submit(bytes16,string)"(
      _jobId: BytesLike,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeout(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "timeout(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "verify(bytes16,uint256)"(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSlotReward(
      _slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawSlotReward(uint256)"(
      _slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentSlot(overrides?: CallOverrides): Promise<BigNumber>;

    "currentSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentSlotReward(overrides?: CallOverrides): Promise<BigNumber>;

    "currentSlotReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    DECLINE_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DECLINE_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    emtToken(overrides?: CallOverrides): Promise<BigNumber>;

    "emtToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    FAILED_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "FAILED_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEstimatedGas(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEstimatedGas(uint256,uint256)"(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVerifier(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isVerifier(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobAssignedCount(
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "jobAssignedCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobAssignedHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "jobAssignedHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobAssigns(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "jobAssigns(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobDetails(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "jobDetails(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "jobIndexes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "jobs(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_SLOT_GAS_PER_NODE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_SLOT_GAS_PER_NODE()"(overrides?: CallOverrides): Promise<BigNumber>;

    nodeSlotCount(_node: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nodeSlotCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nodeSlots(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeSlotUnique(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nodeSlotUnique(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slotBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slotBalances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slotGas(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "slotGas(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slots(_slot: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "slots(uint256)"(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startSlot(overrides?: CallOverrides): Promise<BigNumber>;

    "startSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIMEOUT_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "TIMEOUT_PENALTY_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    "verifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "VERIFIER_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancel(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decline(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decline(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    process(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "process(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectResult(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rejectResult(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    request(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "request(bytes16,uint256,string,string,uint256,uint256)"(
      _jobId: BytesLike,
      _programId: BigNumberish,
      _dataset: string,
      _param: string,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVerifier(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submit(
      _jobId: BytesLike,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submit(bytes16,string)"(
      _jobId: BytesLike,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeout(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "timeout(bytes16)"(
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "verify(bytes16,uint256)"(
      _jobId: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSlotReward(
      _slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawSlotReward(uint256)"(
      _slot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentSlot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentSlot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentSlotReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentSlotReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DECLINE_PENALTY_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DECLINE_PENALTY_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPOSIT_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEPOSIT_RATE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emtToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FAILED_PENALTY_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FAILED_PENALTY_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEstimatedGas(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEstimatedGas(uint256,uint256)"(
      _datasetSizeMB: BigNumberish,
      _algoComplexity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVerifier(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVerifier(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobAssignedCount(
      _node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "jobAssignedCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobAssignedHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "jobAssignedHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobAssigns(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "jobAssigns(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobDetails(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "jobDetails(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "jobIndexes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "jobs(bytes16)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SLOT_GAS_PER_NODE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_SLOT_GAS_PER_NODE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeSlotCount(
      _node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nodeSlotCount(address)"(
      _node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeSlots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nodeSlots(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeSlotUnique(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nodeSlotUnique(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slotBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slotBalances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slotGas(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slotGas(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slots(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "slots(uint256)"(
      _slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startSlot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startSlot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIMEOUT_PENALTY_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TIMEOUT_PENALTY_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "verifier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFIER_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERIFIER_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
